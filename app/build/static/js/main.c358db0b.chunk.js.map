{"version":3,"sources":["components/Note.js","services/notes.js","services/login.js","components/Togglable.js","components/LoginForm.js","components/AddNotesForm.js","components/ErrorMessage.js","App.js","index.js"],"names":["Note","note","content","BASE_URL","token","axios","get","then","res","data","newObj","config","headers","Authorization","post","newToken","login","credentials","a","Togglable","forwardRef","ref","children","buttonLabel","useState","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","style","onClick","displayName","LoginForm","username","password","handleLogin","handlePasswordChange","handleUsernameChange","onSubmit","type","value","name","placeholder","onChange","AddNotesForm","handleLogOut","addNote","newNote","setNewNote","togglableRef","useRef","event","preventDefault","noteObject","important","Math","random","current","target","ErrorMessage","errorMessage","backgroundColor","color","App","notes","setNotes","setErrorMessage","showAll","setShowAll","setUsername","setPassword","user","setUser","useEffect","loggedUserJSON","window","localStorage","getItem","JSON","parse","noteService","loginService","setItem","stringify","console","log","setTimeout","notesToShow","removeItem","returnedObject","map","i","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.c358db0b.chunk.js","sourcesContent":["export const Note = ({ note }) => {\r\n  return (\r\n    <li>\r\n      <p>{note.content}</p>\r\n    </li>\r\n  )\r\n}\r\n","import axios from 'axios'\r\nconst BASE_URL = '/api/notes/'\r\n\r\nlet token = null\r\n\r\nconst setToken = newToken => {\r\n  token = `Bearer ${newToken}`\r\n}\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(BASE_URL)\r\n  return request.then(res => res.data)\r\n}\r\n\r\nconst create = (newObj) => {\r\n  const config = {\r\n    headers: {\r\n      Authorization: token\r\n    }\r\n  }\r\n  const request = axios.post(BASE_URL, newObj, config)\r\n  return request.then(res => res.data)\r\n}\r\n\r\nconst update = (id, newObj) => {\r\n  const config = {\r\n    headers: {\r\n      Authorization: token\r\n    }\r\n  }\r\n  const request = axios.post(`${BASE_URL}/${id}`, newObj, config)\r\n  return request.then(res => res.data)\r\n}\r\n\r\nexport default { getAll, create, update, setToken }\r\n","import axios from 'axios'\r\nconst BASE_URL = '/api/login/'\r\n\r\nconst login = async credentials => {\r\n  const { data } = await axios.post(BASE_URL, credentials)\r\n  return data\r\n}\r\n\r\nexport default { login }\r\n","import React, { useState, forwardRef, useImperativeHandle } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Togglable = forwardRef(({ children, buttonLabel = 'toggleVisibility' }, ref) => {\r\n  const [visible, setVisible] = useState(false)\r\n  const hideWhenVisible = { display: visible ? 'none' : '' }\r\n  const showWhenVisible = { display: visible ? '' : 'none' }\r\n\r\n  const toggleVisibility = () => setVisible(!visible)\r\n\r\n  useImperativeHandle(ref, () => {\r\n    return {\r\n      toggleVisibility\r\n    }\r\n  })\r\n  return (\r\n    <>\r\n      <div style={hideWhenVisible}>\r\n        <button onClick={toggleVisibility}>{buttonLabel}</button>\r\n      </div>\r\n      <div style={showWhenVisible}>\r\n        {children}\r\n        <button onClick={toggleVisibility}>Cancel</button>\r\n      </div>\r\n    </>\r\n  )\r\n})\r\n\r\nTogglable.propTypes = {\r\n  buttonLabel: PropTypes.string\r\n}\r\n\r\nTogglable.displayName = 'Togglable'\r\n\r\nexport default Togglable\r\n","import React from 'react'\r\nimport Togglable from './Togglable'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function LoginForm ({ username, password, handleLogin, handlePasswordChange, handleUsernameChange }) {\r\n  return (\r\n    <Togglable buttonLabel='Show login'>\r\n      <form onSubmit={handleLogin}>\r\n        <div>\r\n          <input\r\n            type='text'\r\n            value={username}\r\n            name='Username'\r\n            placeholder='Username'\r\n            onChange={handleUsernameChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <input\r\n            type='password'\r\n            value={password}\r\n            name='Password'\r\n            placeholder='Password'\r\n            onChange={handlePasswordChange}\r\n          />\r\n        </div>\r\n        <button>Login</button>\r\n      </form>\r\n    </Togglable>\r\n  )\r\n}\r\n\r\nLoginForm.propTypes = {\r\n  username: PropTypes.string,\r\n  password: PropTypes.string,\r\n  handleLogin: PropTypes.func.isRequired,\r\n  handlePasswordChange: PropTypes.func.isRequired,\r\n  handleUsernameChange: PropTypes.func.isRequired\r\n}\r\n","import React, { useState, useRef } from 'react'\r\nimport Togglable from './Togglable'\r\n\r\nexport default function AddNotesForm ({ handleLogOut, addNote }) {\r\n  const [newNote, setNewNote] = useState('')\r\n  const togglableRef = useRef()\r\n  const handleChange = ({ target }) => {\r\n    setNewNote(target.value)\r\n  }\r\n  const handleSubmit = event => {\r\n    event.preventDefault()\r\n    const noteObject = {\r\n      content: newNote,\r\n      important: Math.random() > 0.5\r\n    }\r\n    addNote(noteObject)\r\n    setNewNote('')\r\n    togglableRef.current.toggleVisibility()\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Togglable ref={togglableRef} buttonLabel='Add new note'>\r\n        <div>\r\n          <button onClick={handleLogOut}>\r\n            Cerrar Sesi√≥n\r\n          </button>\r\n        </div>\r\n        <div>\r\n          <form onSubmit={handleSubmit}>\r\n            <input\r\n              value={newNote}\r\n              onChange={handleChange}\r\n            />\r\n            <button>Save</button>\r\n          </form>\r\n        </div>\r\n      </Togglable>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function ErrorMessage ({ errorMessage }) {\r\n  const styles = {\r\n    display: 'inline',\r\n    backgroundColor: 'red',\r\n    color: '#ccc'\r\n  }\r\n  return (\r\n    <h2 style={styles}>{errorMessage}</h2>\r\n  )\r\n}\r\n","import './styles.css'\r\nimport { useEffect, useState } from 'react'\r\nimport { Note } from './components/Note'\r\nimport noteService from './services/notes'\r\nimport loginService from './services/login'\r\nimport LoginForm from './components/LoginForm'\r\nimport AddNotesForm from './components/AddNotesForm'\r\nimport ErrorMessage from './components/ErrorMessage'\r\n\r\nexport default function App () {\r\n  const [notes, setNotes] = useState([])\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n  const [showAll, setShowAll] = useState(true)\r\n  const [username, setUsername] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [user, setUser] = useState(null)\r\n\r\n  useEffect(() => {\r\n    const loggedUserJSON = window.localStorage.getItem('loggedNoteAppUser')\r\n    if (loggedUserJSON) {\r\n      const user = JSON.parse(loggedUserJSON)\r\n      setUser(user)\r\n      noteService.setToken(user.token)\r\n    }\r\n  }, [])\r\n\r\n  const getNotes = () => {\r\n    console.log('Hola')\r\n    noteService\r\n      .getAll()\r\n      .then((notes) => {\r\n        setNotes(notes)\r\n      })\r\n  }\r\n\r\n  const addNote = (noteObject) => {\r\n    noteService\r\n      .create(noteObject)\r\n      .then((returnedObject) => {\r\n        setNotes([...notes, returnedObject])\r\n      })\r\n  }\r\n\r\n  const handleLogOut = () => {\r\n    setUser(null)\r\n    noteService.setToken(user.token)\r\n    window.localStorage.removeItem('loggedNoteAppUser')\r\n    setNotes([])\r\n  }\r\n\r\n  const handleLogin = async (event) => {\r\n    event.preventDefault()\r\n\r\n    try {\r\n      const user = await loginService.login({\r\n        username,\r\n        password\r\n      })\r\n\r\n      window.localStorage.setItem(\r\n        'loggedNoteAppUser', JSON.stringify(user)\r\n      )\r\n      getNotes()\r\n      console.log(user)\r\n      noteService.setToken(user.token)\r\n      setUser(user)\r\n      setUsername('')\r\n      setPassword('')\r\n    } catch (e) {\r\n      setErrorMessage('Wrong username or password')\r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 3000)\r\n    }\r\n  }\r\n\r\n  // const handleSubmit = (event) => {\r\n  //   event.preventDefault();\r\n\r\n  //   const noteToAddToState = {\r\n  //     userId: 1,\r\n  //     content: newNote\r\n  //   };\r\n\r\n  //   noteService.create(noteToAddToState).then((newNote) => {\r\n  //     const error = newNote;\r\n  //     console.log(error.error);\r\n  //     if (!error.error) return setNotes((prevNotes) => prevNotes.concat(newNote))\r\n  //   });\r\n  //   setNewNote(\"\");\r\n  // };\r\n\r\n  const notesToShow = notes\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      {\r\n      errorMessage\r\n        ? <ErrorMessage errorMessage={errorMessage} />\r\n        : ''\r\n      }\r\n      {\r\n        !user\r\n          ? <LoginForm\r\n              username={username}\r\n              password={password}\r\n              handleUsernameChange={event => setUsername(event.target.value)}\r\n              handlePasswordChange={event => setPassword(event.target.value)}\r\n              handleLogin={handleLogin}\r\n            />\r\n          : <AddNotesForm\r\n              handleLogOut={handleLogOut}\r\n              addNote={addNote}\r\n            />\r\n      }\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show\r\n          {' '}\r\n          {showAll ? 'important' : 'all'}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {notesToShow.map((note, i) => (\r\n          <Note\r\n            key={i}\r\n            note={note}\r\n          // toggleImportance={() => toggleImportanceOf(note.id)}\r\n          />\r\n        )\r\n        )}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n","import ReactDOM from 'react-dom'\r\n\r\nimport App from './App'\r\n\r\nconst rootElement = document.getElementById('root')\r\nReactDOM.render(<App />, rootElement)\r\n"],"sourceRoot":""}